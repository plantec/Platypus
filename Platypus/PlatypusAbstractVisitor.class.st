Class {
	#name : #PlatypusAbstractVisitor,
	#superclass : #PlatypusCoreAbstractVisitor,
	#category : #'Platypus-PlatypusMetaSchemasSchemaInstance'
}

{ #category : #'platypus-generated-platypus-signature' }
PlatypusAbstractVisitor class >> iso10303P11Translater [
  ^'Platypus (c) LISYC EA3883, Universite de Bretagne occidentale. Brest.'


]

{ #category : #'platypus-generated-platypus-signature' }
PlatypusAbstractVisitor class >> translatedFromISO10303P11 [
  ^true


]

{ #category : #'platypus-generated-platypus-signature' }
PlatypusAbstractVisitor class >> vwNamespaceName [
  ^#Platypus


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptAggrUnaryExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusAggregateDataSchema' }
PlatypusAbstractVisitor >> acceptAggregateData: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusAggregateDataSchema' }
PlatypusAbstractVisitor >> acceptAggregateInitializer: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptAggregateInitializerDomain: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusAggregateDataSchema' }
PlatypusAbstractVisitor >> acceptAggregateInitializerElement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusAggregateDataSchema' }
PlatypusAbstractVisitor >> acceptAggregateInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptAggregateType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptAggregationType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptAlgorithmDeclaration: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptAlgorithmRef: e [  "my subclasses have to redefine it"


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptAliasStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptAliasStatementVariable: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptAndExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptAndSupertype: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptAndorSupertype: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptAnonymousVariable: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptApplicationInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptArithmeticExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusAggregateDataSchema' }
PlatypusAbstractVisitor >> acceptArrayInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptArrayType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptAssignable: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptAssignmentStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptAttribute: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptAttributeIdentifier: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptAttributeQualifier: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptAttributeReference: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusAggregateDataSchema' }
PlatypusAbstractVisitor >> acceptBagInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptBagType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptBinaryExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptBinaryLiteral: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptBinarySupertypeExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptBinaryType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptBooleanType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptBound: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptCardinalityExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptCaseAction: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptCaseStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptComparisonExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptCompoundStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptConstantDefinition: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptContextDefinition: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptContextRef: e [  "my subclasses have to redefine it"


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptDefinedType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptDefinedTypeReference: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptDerivedAttribute: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptDictionaryInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptDictionaryInstanceReference: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptDivExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptDomainEquivalentItem: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptEConstant: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptElementQualifier: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptElementRef: e [  "my subclasses have to redefine it"


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptElementReference: e [  "my subclasses have to redefine it"


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptEmbeddedRemark: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptEndSplitmarkStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptEntityDefinition: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptEntityDefinitionReference: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptEntityInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptEntityInstanceConstructor: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptEntityInstanceReference: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptEntityInstancesSet: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptEntityReference: e [  "my subclasses have to redefine it"


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptEnumerationType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptEnumerationValue: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptEqualExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptEscapeStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptEscapedExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptExplicitAttribute: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptExpoExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptExternalGroupRepresentation: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptExternalMetaSchema: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptExternalRepresentation: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptExternalSchema: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptFalseConstant: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptFileDescription: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptFileName: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptFileSchema: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptFunctionDeclaration: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptGeneralAggregateType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptGenericInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptGenericType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptGlobalRule: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptGreaterEqualExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptGreaterThanExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptGroupQualifier: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptGroupRepresentation: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptHeaderInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptIdentifier: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptIfStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptImplicitlyDeclaredIdentifier: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptInExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptIncludeSchema: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptIncrementControl: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptIncrementControlVariable: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptIndexQualifier: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptInstComparisonExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptInstEqualExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptInstNotEqualExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptInstanceConstructionExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptInstanceScope: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptIntegerBound: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptIntegerLiteral: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptIntegerType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptInternalGroupRepresentation: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptInternalRepresentation: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptInterval: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptInverseAttribute: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptLessEqualExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptLessThanExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptLikeExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusAggregateDataSchema' }
PlatypusAbstractVisitor >> acceptListInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptListType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptLiteral: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptLocalVariable: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptLogicalExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptLogicalLiteral: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptLogicalType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptMetaConceptDefinition: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptMetaMappingDefinition: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptMetaMappingRule: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptMinusExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptMissingValue: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptModExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusEnvironmentSchema' }
PlatypusAbstractVisitor >> acceptModelContents: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptMultExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptNamedType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptNamedTypeRef: e [  "my subclasses have to redefine it"


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptNamedTypeReference: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptNativeAlgorithm: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptNativeCode: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptNativeExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptNativeStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptNegativeExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptNotEqualExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptNotExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptNullStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptNumberType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptNumericLiteral: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptOneofSupertypeExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptOrExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptOutputStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptParameterDefinition: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptPiConstant: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptPlusExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptPopulationDependentBound: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptPositiveExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptProcedureCallStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptProcedureDeclaration: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptQualifiedExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptQualifier: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptQueryExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptQueryVariable: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptRangeQualifier: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptRealDivExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptRealLiteral: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptRealType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptRedefinedAttributeValue: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptReferencedSchema: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptRemark: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptRemarkReference: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptRepeatStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptReturnStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptRuleRef: e [  "my subclasses have to redefine it"


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSchemaDefinition: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusEnvironmentSchema' }
PlatypusAbstractVisitor >> acceptSchemaInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSchemaInstanceRef: e [  "my subclasses have to redefine it"


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSchemaRef: e [  "my subclasses have to redefine it"


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSchemaReference: e [  "my subclasses have to redefine it"


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSdaiInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSelectType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptSelfIdentifier: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSessionInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusAggregateDataSchema' }
PlatypusAbstractVisitor >> acceptSetInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSetType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptSimpleRecord: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSimpleType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptSimpleUnaryExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptSkipStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptSplitmarkStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusStatementsSchema' }
PlatypusAbstractVisitor >> acceptStatement: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptStatementsContainer: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptStringLiteral: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptStringType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSubEntityRefExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSupertypeConstraint: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptSupertypeExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptTailRemark: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptTrueConstant: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptTypedExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptUnaryExpression: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptUniquenessRule: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptUniquenessRuleAttributeIdentifier: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptUnknownConstant: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptUsedSchema: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptUserDefinedApplicationInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusPopulationSchema' }
PlatypusAbstractVisitor >> acceptUserDefinedHeaderInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusAggregateDataSchema' }
PlatypusAbstractVisitor >> acceptVariableSizeAggregationInstance: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptVariableSizeAggregationType: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusDictionarySchema' }
PlatypusAbstractVisitor >> acceptWhereRule: e [
  "my subclasses have to redefine it"
  


]

{ #category : #'platypus-generated-visitingPlatypusExpressionsSchema' }
PlatypusAbstractVisitor >> acceptXorExpression: e [
  "my subclasses have to redefine it"
  


]
